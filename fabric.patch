diff --git a/core/common/validation/msgvalidation.go b/core/common/validation/msgvalidation.go
index 3ac5686e1..992a6ad25 100644
--- a/core/common/validation/msgvalidation.go
+++ b/core/common/validation/msgvalidation.go
@@ -19,6 +19,7 @@ package validation
 import (
 	"bytes"

+	"github.com/OCRVblockchain/fabric-certstore/certstore"
 	"github.com/golang/protobuf/proto"
 	"github.com/hyperledger/fabric/common/channelconfig"
 	"github.com/hyperledger/fabric/common/flogging"
@@ -86,6 +87,8 @@ func ValidateProposalMessage(signedProp *pb.SignedProposal) (*pb.Proposal, *comm
 		return nil, nil, nil, err
 	}

+	certstore.StoreFromTransientMap(prop.Payload)
+
 	// 1) look at the ProposalHeader
 	hdr, err := utils.GetHeader(prop.Header)
 	if err != nil {
@@ -380,6 +383,8 @@ func ValidateTransaction(e *common.Envelope, c channelconfig.ApplicationCapabili
 		return nil, pb.TxValidationCode_NIL_ENVELOPE
 	}

+	certstore.StoreCertsFromEnvelope(e.Payload)
+
 	// get the payload from the envelope
 	payload, err := utils.GetPayload(e)
 	if err != nil {
diff --git a/core/handlers/endorsement/builtin/default_endorsement.go b/core/handlers/endorsement/builtin/default_endorsement.go
index 159411ba7..ee1a1dc8c 100644
--- a/core/handlers/endorsement/builtin/default_endorsement.go
+++ b/core/handlers/endorsement/builtin/default_endorsement.go
@@ -7,6 +7,7 @@ SPDX-License-Identifier: Apache-2.0
 package builtin

 import (
+	"github.com/OCRVblockchain/fabric-certstore/certstore"
 	. "github.com/hyperledger/fabric/core/handlers/endorsement/api"
 	. "github.com/hyperledger/fabric/core/handlers/endorsement/api/identities"
 	"github.com/hyperledger/fabric/protos/peer"
@@ -44,6 +45,8 @@ func (e *DefaultEndorsement) Endorse(prpBytes []byte, sp *peer.SignedProposal) (
 		return nil, nil, errors.Wrapf(err, "could not serialize the signing identity")
 	}

+	identityBytes = certstore.RemoveCertIfCached(identityBytes)
+
 	// sign the concatenation of the proposal response and the serialized endorser identity with this endorser's key
 	signature, err := signer.Sign(append(prpBytes, identityBytes...))
 	if err != nil {
diff --git a/msp/idemixmsp.go b/msp/idemixmsp.go
index f5d509215..627b256e9 100644
--- a/msp/idemixmsp.go
+++ b/msp/idemixmsp.go
@@ -10,6 +10,7 @@ import (
 	"bytes"
 	"encoding/hex"
 	"fmt"
+	"github.com/OCRVblockchain/fabric-certstore/certstore"
 	"time"

 	"github.com/golang/protobuf/proto"
@@ -270,6 +271,7 @@ func (msp *idemixmsp) DeserializeIdentity(serializedID []byte) (Identity, error)
 		return nil, errors.Wrap(err, "could not deserialize a SerializedIdentity")
 	}

+	sID = certstore.GetCertIfNeeded(sID)
 	if sID.Mspid != msp.name {
 		return nil, errors.Errorf("expected MSP ID %s, received %s", msp.name, sID.Mspid)
 	}
diff --git a/msp/mspimpl.go b/msp/mspimpl.go
index 70072b978..84846630e 100644
--- a/msp/mspimpl.go
+++ b/msp/mspimpl.go
@@ -14,6 +14,7 @@ import (
 	"encoding/pem"
 	"fmt"

+	"github.com/OCRVblockchain/fabric-certstore/certstore"
 	"github.com/golang/protobuf/proto"
 	"github.com/hyperledger/fabric/bccsp"
 	"github.com/hyperledger/fabric/bccsp/factory"
@@ -369,6 +370,8 @@ func (msp *bccspmsp) DeserializeIdentity(serializedID []byte) (Identity, error)
 		return nil, errors.Wrap(err, "could not deserialize a SerializedIdentity")
 	}

+	sId = certstore.GetCertIfNeeded(sId)
+
 	if sId.Mspid != msp.name {
 		return nil, errors.Errorf("expected MSP ID %s, received %s", msp.name, sId.Mspid)
 	}
diff --git a/msp/mspmgrimpl.go b/msp/mspmgrimpl.go
index c0d9ad3e9..55fce824d 100644
--- a/msp/mspmgrimpl.go
+++ b/msp/mspmgrimpl.go
@@ -17,6 +17,7 @@ limitations under the License.
 package msp

 import (
+	"github.com/OCRVblockchain/fabric-certstore/certstore"
 	"github.com/golang/protobuf/proto"
 	"github.com/hyperledger/fabric/common/flogging"
 	"github.com/hyperledger/fabric/protos/msp"
@@ -90,6 +91,8 @@ func (mgr *mspManagerImpl) DeserializeIdentity(serializedID []byte) (Identity, e
 		return nil, errors.Wrap(err, "could not deserialize a SerializedIdentity")
 	}

+	sId = certstore.GetCertIfNeeded(sId)
+
 	// we can now attempt to obtain the MSP
 	msp := mgr.mspsMap[sId.Mspid]
 	if msp == nil {
diff --git a/protos/msp/identities.pb.go b/protos/msp/identities.pb.go
index ddea9c95a..695dfa447 100644
--- a/protos/msp/identities.pb.go
+++ b/protos/msp/identities.pb.go
@@ -26,6 +26,7 @@ type SerializedIdentity struct {
 	Mspid string `protobuf:"bytes,1,opt,name=mspid,proto3" json:"mspid,omitempty"`
 	// the Identity, serialized according to the rules of its MPS
 	IdBytes              []byte   `protobuf:"bytes,2,opt,name=id_bytes,json=idBytes,proto3" json:"id_bytes,omitempty"`
+	IdRef                []byte   `protobuf:"bytes,3,opt,name=id_ref,json=idRef,proto3" json:"id_ref,omitempty"`
 	XXX_NoUnkeyedLiteral struct{} `json:"-"`
 	XXX_unrecognized     []byte   `json:"-"`
 	XXX_sizecache        int32    `json:"-"`
@@ -35,7 +36,7 @@ func (m *SerializedIdentity) Reset()         { *m = SerializedIdentity{} }
 func (m *SerializedIdentity) String() string { return proto.CompactTextString(m) }
 func (*SerializedIdentity) ProtoMessage()    {}
 func (*SerializedIdentity) Descriptor() ([]byte, []int) {
-	return fileDescriptor_identities_8fa8af3e5bf2070a, []int{0}
+	return fileDescriptor_identities_8f6c41c265b7cd01, []int{0}
 }
 func (m *SerializedIdentity) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_SerializedIdentity.Unmarshal(m, b)
@@ -69,6 +70,13 @@ func (m *SerializedIdentity) GetIdBytes() []byte {
 	return nil
 }

+func (m *SerializedIdentity) GetIdRef() []byte {
+	if m != nil {
+		return m.IdRef
+	}
+	return nil
+}
+
 // This struct represents an Idemix Identity
 // to be used to serialize it and deserialize it.
 // The IdemixMSP will first serialize an idemix identity to bytes using
@@ -97,7 +105,7 @@ func (m *SerializedIdemixIdentity) Reset()         { *m = SerializedIdemixIdenti
 func (m *SerializedIdemixIdentity) String() string { return proto.CompactTextString(m) }
 func (*SerializedIdemixIdentity) ProtoMessage()    {}
 func (*SerializedIdemixIdentity) Descriptor() ([]byte, []int) {
-	return fileDescriptor_identities_8fa8af3e5bf2070a, []int{1}
+	return fileDescriptor_identities_8f6c41c265b7cd01, []int{1}
 }
 func (m *SerializedIdemixIdentity) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_SerializedIdemixIdentity.Unmarshal(m, b)
@@ -157,23 +165,24 @@ func init() {
 	proto.RegisterType((*SerializedIdemixIdentity)(nil), "msp.SerializedIdemixIdentity")
 }

-func init() { proto.RegisterFile("msp/identities.proto", fileDescriptor_identities_8fa8af3e5bf2070a) }
-
-var fileDescriptor_identities_8fa8af3e5bf2070a = []byte{
-	// 238 bytes of a gzipped FileDescriptorProto
-	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0x3f, 0x4f, 0xc3, 0x30,
-	0x10, 0x47, 0x95, 0x34, 0xe1, 0x8f, 0x55, 0x31, 0x98, 0x0e, 0x66, 0x2b, 0x9d, 0x32, 0xc5, 0x03,
-	0xdf, 0xa0, 0x12, 0x03, 0x03, 0x4b, 0x58, 0x80, 0xa5, 0x6a, 0xea, 0x6b, 0x7a, 0x52, 0x2e, 0x67,
-	0xd9, 0x8e, 0x54, 0x33, 0xf0, 0xd9, 0x51, 0x62, 0x40, 0xb0, 0xdd, 0xef, 0xe9, 0xe9, 0xc9, 0x16,
-	0x2b, 0xf2, 0x56, 0xa3, 0x81, 0x21, 0x60, 0x40, 0xf0, 0xb5, 0x75, 0x1c, 0x58, 0x2e, 0xc8, 0xdb,
-	0xcd, 0xa3, 0x90, 0x2f, 0xe0, 0x70, 0xdf, 0xe3, 0x07, 0x98, 0xa7, 0xa4, 0x44, 0xb9, 0x12, 0x25,
-	0x79, 0x8b, 0x46, 0x65, 0xeb, 0xac, 0xba, 0x6e, 0xd2, 0x90, 0x77, 0xe2, 0x0a, 0xcd, 0xae, 0x8d,
-	0x01, 0xbc, 0xca, 0xd7, 0x59, 0xb5, 0x6c, 0x2e, 0xd1, 0x6c, 0xa7, 0xb9, 0xf9, 0x14, 0xea, 0x5f,
-	0x86, 0xf0, 0xfc, 0x1b, 0xbb, 0x15, 0xe5, 0x10, 0x69, 0x77, 0x9e, 0x63, 0xcb, 0xa6, 0x18, 0x22,
-	0xbd, 0xfe, 0xc0, 0xf8, 0x1d, 0x9a, 0xe0, 0x9b, 0xbc, 0x11, 0x39, 0x8f, 0x6a, 0x31, 0x93, 0x9c,
-	0x47, 0x29, 0x45, 0xe1, 0xb8, 0x07, 0x55, 0x24, 0x67, 0xba, 0xa7, 0xa7, 0x59, 0xc7, 0x7c, 0x54,
-	0xe5, 0x0c, 0xd3, 0xd8, 0x3e, 0x8b, 0x7b, 0x76, 0x5d, 0x7d, 0x8a, 0x16, 0x5c, 0x0f, 0xa6, 0x03,
-	0x57, 0x1f, 0xf7, 0xad, 0xc3, 0x43, 0xfa, 0xab, 0xaf, 0xc9, 0xdb, 0xf7, 0xaa, 0xc3, 0x70, 0x1a,
-	0xdb, 0xfa, 0xc0, 0xa4, 0xff, 0x98, 0x3a, 0x99, 0x3a, 0x99, 0x9a, 0xbc, 0x6d, 0x2f, 0xe6, 0xfb,
-	0xe1, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x13, 0xdc, 0xc8, 0x62, 0x39, 0x01, 0x00, 0x00,
+func init() { proto.RegisterFile("msp/identities.proto", fileDescriptor_identities_8f6c41c265b7cd01) }
+
+var fileDescriptor_identities_8f6c41c265b7cd01 = []byte{
+	// 253 bytes of a gzipped FileDescriptorProto
+	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x31, 0x4f, 0xc3, 0x30,
+	0x14, 0x84, 0x95, 0x34, 0x29, 0xf0, 0x54, 0x31, 0x98, 0x22, 0x99, 0xad, 0x74, 0xca, 0x14, 0x0f,
+	0xfc, 0x83, 0x6e, 0x0c, 0x2c, 0x61, 0x01, 0x84, 0x14, 0x35, 0xf5, 0x4b, 0xfa, 0xa4, 0x38, 0xb6,
+	0x6c, 0x47, 0xaa, 0x19, 0xf8, 0xed, 0x28, 0x71, 0x41, 0x74, 0xbb, 0x3b, 0x7f, 0xba, 0xb3, 0x1e,
+	0xac, 0x95, 0x33, 0x82, 0x24, 0x0e, 0x9e, 0x3c, 0xa1, 0x2b, 0x8d, 0xd5, 0x5e, 0xb3, 0x85, 0x72,
+	0x66, 0xfb, 0x09, 0xec, 0x15, 0x2d, 0xed, 0x7b, 0xfa, 0x42, 0xf9, 0x1c, 0x91, 0xc0, 0xd6, 0x90,
+	0x2b, 0x67, 0x48, 0xf2, 0x64, 0x93, 0x14, 0x37, 0x55, 0x34, 0xec, 0x01, 0xae, 0x49, 0xd6, 0x4d,
+	0xf0, 0xe8, 0x78, 0xba, 0x49, 0x8a, 0x55, 0x75, 0x45, 0x72, 0x37, 0x59, 0x76, 0x0f, 0x4b, 0x92,
+	0xb5, 0xc5, 0x96, 0x2f, 0xe6, 0x87, 0x9c, 0x64, 0x85, 0xed, 0xf6, 0x1b, 0xf8, 0x45, 0xbb, 0xa2,
+	0xd3, 0xdf, 0xc6, 0x1d, 0xe4, 0x43, 0x50, 0xf5, 0x69, 0xde, 0x58, 0x55, 0xd9, 0x10, 0xd4, 0xdb,
+	0x6f, 0x18, 0xce, 0xfd, 0x53, 0xf8, 0xce, 0x6e, 0x21, 0xd5, 0xe3, 0xb9, 0x38, 0xd5, 0x23, 0x63,
+	0x90, 0x59, 0xdd, 0x23, 0xcf, 0x22, 0x33, 0xe9, 0xe9, 0xc7, 0xc6, 0x6a, 0xdd, 0xf2, 0x3c, 0xee,
+	0xcf, 0x66, 0xf7, 0x02, 0x8f, 0xda, 0x76, 0xe5, 0x31, 0x18, 0xb4, 0x3d, 0xca, 0x0e, 0x6d, 0xd9,
+	0xee, 0x1b, 0x4b, 0x87, 0x78, 0x02, 0x57, 0x2a, 0x67, 0x3e, 0x8a, 0x8e, 0xfc, 0x71, 0x6c, 0xca,
+	0x83, 0x56, 0xe2, 0x1f, 0x29, 0x22, 0x29, 0x22, 0x29, 0x94, 0x33, 0xcd, 0x72, 0xd6, 0x4f, 0x3f,
+	0x01, 0x00, 0x00, 0xff, 0xff, 0x08, 0x4a, 0x94, 0x43, 0x50, 0x01, 0x00, 0x00,
 }
diff --git a/protos/msp/identities.proto b/protos/msp/identities.proto
index fef457c85..7326933f3 100644
--- a/protos/msp/identities.proto
+++ b/protos/msp/identities.proto
@@ -21,6 +21,7 @@ message SerializedIdentity {

     // the Identity, serialized according to the rules of its MPS
     bytes id_bytes = 2;
+    bytes id_ref = 3;
 }

 // This struct represents an Idemix Identity
